var searchIndex = JSON.parse('{\
"blsttc":{"doc":"A pairing-based threshold cryptosystem for collaborative …","tn":["0","Ciphertext","DST","DecryptionShare","Fr","G1","G1Affine","G2","G2Affine","IntoFr","PEngine","PK_SIZE","PublicKey","PublicKeySet","PublicKeyShare","SIG_SIZE","SK_SIZE","SecretKey","SecretKeySet","SecretKeyShare","Signature","SignatureShare","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_mixed","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","char","char_le_bits","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","combine_signatures","compressed_size","compressed_size","conditional_negate","conditional_negate","conditional_negate","conditional_negate","conditional_negate","conditional_select","conditional_select","conditional_select","conditional_select","conditional_select","ct_eq","decrypt","decrypt","decrypt_share","decrypt_share_no_verify","default","default","default","default","default","derive_child","derive_child","derive_child","derive_child","derive_child","derive_child","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","double","double","double","drop","encrypt","encrypt_with_rng","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes_be","from_bytes_le","from_bytes_unchecked","from_bytes_unchecked","from_bytes_unchecked","from_bytes_unchecked","from_compressed","from_compressed","from_compressed","from_compressed","from_compressed_unchecked","from_compressed_unchecked","from_compressed_unchecked","from_compressed_unchecked","from_mut","from_mut","from_raw_unchecked","from_raw_unchecked","from_raw_unchecked","from_raw_unchecked","from_repr","from_repr_vartime","from_u64s_le","from_uncompressed","from_uncompressed","from_uncompressed","from_uncompressed","from_uncompressed","from_uncompressed","from_uncompressed_unchecked","from_uncompressed_unchecked","from_uncompressed_unchecked","from_uncompressed_unchecked","from_uncompressed_unchecked","from_uncompressed_unchecked","generator","generator","generator","generator","hash","hash","hash","hash","hash","hash","hash","hash_g2","hash_to_curve","hash_to_curve","identity","identity","identity","identity","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_fr","into_fr","invert","is_identity","is_identity","is_identity","is_identity","is_odd","is_on_curve","is_on_curve","is_on_curve","is_on_curve","is_quad_res","is_torsion_free","is_torsion_free","is_zero","legendre","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul3","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","multi_miller_loop","multiplicative_generator","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","neg","neg","neg","neg","neg","num_bits","one","pairing","pairing_with","pairing_with","parity","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","poly","poly","public_key","public_key","public_key_share","public_key_share","public_keys","random","random","random","random","random","raw_fmt_size","read_raw","read_raw_checked","recommended_wnaf_for_num_scalars","recommended_wnaf_for_num_scalars","reveal","reveal","root_of_unity","secret_key","secret_key_share","serde_impl","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","shl","shr","sign","sign","sign_g2","sign_g2","sqrt","square","square_assign","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","threshold","threshold","to_affine","to_affine","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes_be","to_bytes_le","to_compressed","to_compressed","to_compressed","to_compressed","to_curve","to_curve","to_le_bits","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_repr","to_string","to_string","to_string","to_string","to_string","to_uncompressed","to_uncompressed","to_uncompressed","to_uncompressed","to_uncompressed","to_uncompressed","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_random","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uncompressed_size","uncompressed_size","verify","verify","verify","verify_decryption_share","verify_g2","verify_g2","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_raw","x","x","x","x","y","y","y","y","z","z","zero","zeroize","DegreeTooHigh","DuplicateEntry","Error","HashToFieldIsZero","InvalidBytes","NotEnoughShares","Result","borrow","borrow_mut","clone","clone_into","eq","fmt","fmt","from","into","to_owned","to_string","try_from","try_into","type_id","vzip","BivarCommitment","BivarPoly","Commitment","Poly","add","add","add","add","add_assign","add_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","commitment","commitment","constant","degree","degree","degree","degree","deserialize","deserialize","deserialize","drop","drop","eq","eq","eq","evaluate","evaluate","evaluate","evaluate","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_bytes","hash","hash","identity","interpolate","into","into","into","into","is_zero","monomial","mul","mul","mul","mul","mul_assign","mul_assign","ne","ne","ne","one","partial_cmp","partial_cmp","random","random","reveal","reveal","row","row","serialize","serialize","serialize","sub","sub","sub","sub_assign","to_bytes","to_bytes","to_bytes","to_bytes","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_random","try_random","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","zero","zeroize","zeroize","0","0","FieldWrap","SerdeSecret","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deserialize","deserialize","eq","fmt","from","from","inner","into","into","into_inner","into_inner","ne","serialize","serialize","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":["blsttcblsttc::error","","","","","","","","","","","","","","","","","","","","","","blsttc::poly","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","blsttc::serde_impl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","An encrypted message.","The domain separator tag","A decryption share. A threshold of decryption shares can …","Represents an element of the scalar field $\\\\mathbb{F}_q$ …","This is an element of $\\\\mathbb{G}_1$ represented in the …","This is an element of $\\\\mathbb{G}_1$ represented in the …","This is an element of $\\\\mathbb{G}_2$ represented in the …","This is an element of $\\\\mathbb{G}_2$ represented in the …","A conversion into an element of the field <code>Fr</code>.","Bls12-381 engine","The size of a key’s representation in bytes.","A public key.","A public key and an associated set of public key shares.","A public key share.","The size of a signature’s representation in bytes.","The size of a secret key’s representation in bytes.","A secret key; wraps a single prime field element. The …","A secret key and an associated set of secret key shares.","A secret key share.","A signature.","A signature share.","","","","","","","","","","","","","","","","","","","","","","","","","Adds this point to another point in the affine model.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Combines the shares into a signature that can be verified …","","","","","","","","","","","","","","Returns the decrypted text, or <code>None</code>, if the ciphertext isn…","Combines the shares to decrypt the ciphertext.","Returns a decryption share, or <code>None</code>, if the ciphertext isn…","Returns a decryption share, without validating the …","","","","","","Derives a child public key for a given index.","Derives a child public key share for a given index.","Derives a child secret key for a given index.","Derives a child secret key share for a given index.","Derives a child public key set for a given index.","Derives a child secret key set for a given index.","","","","","","","","","","","","","","","","","","","Encrypts the message using the OS random number generator.","Encrypts the message.","","","","","","","","","","","","","","","","","","","Crypto errors.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the key with the given representation, if valid.","Returns the key share with the given representation, if …","Returns the signature with the given representation, if …","Returns the signature share with the given representation, …","Deserialize from big endian bytes","Deserializes from big endian bytes","Returns the Ciphertext with the given representation, if …","Deserializes the share from big endian bytes","Deserializes from big endian bytes","Deserializes from big endian bytes","","","","","Attempts to convert a big-endian byte representation of a …","Attempts to convert a little-endian byte representation of …","","","","","Attempts to deserialize a compressed element.","Attempts to deserialize a compressed element.","Attempts to deserialize a compressed element.","Attempts to deserialize a compressed element.","Attempts to deserialize an uncompressed element, not …","Attempts to deserialize an uncompressed element, not …","Attempts to deserialize an uncompressed element, not …","Attempts to deserialize an uncompressed element, not …","Creates a new <code>SecretKey</code> from a mutable reference to a …","Creates a new <code>SecretKeyShare</code> from a mutable reference to a …","","","","","Converts a little-endian non-Montgomery form <code>repr</code> into a …","","","","Attempts to deserialize an uncompressed element.","Attempts to deserialize an uncompressed element.","","Attempts to deserialize an uncompressed element.","Attempts to deserialize an uncompressed element.","Attempts to deserialize an uncompressed element, not …","","Attempts to deserialize an uncompressed element, not …","","Attempts to deserialize an uncompressed element, not …","Attempts to deserialize an uncompressed element, not …","","","","","","","","","","","","Returns a hash of the given message in <code>G2</code>.","Hash to curve algorithm.","Hash to curve algorithm.","","","","","","","","","","","","","","","","","","","","","","Converts <code>self</code> to a field element.","","","","","","","","Returns true if this point is on the curve. This should …","Returns true if this point is on the curve. This should …","Returns true if this point is on the curve. This should …","Returns true if this point is on the curve. This should …","","Returns true if this point is free of an $h$-torsion …","Returns true if this point is free of an $h$-torsion …","","","","","","","","","","","","","Multiplies <code>self</code> with <code>3</code>, returning the result.","","","","","","","","","","","Computes $$\\\\sum_{i=1}^n \\\\textbf{ML}(a_i, b_i)$$ given a …","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if the signature contains an odd number of …","","","","","","","","Utilities for distributed key generation: uni- and …","Returns a reference to the polynomial","Returns the matching public key.","Returns the public key.","Returns the matching public key share.","Returns the <code>i</code>-th public key share.","Returns the corresponding public key set. That information …","Creates a new random instance of <code>SecretKey</code>.","Creates a set of secret key shares, where any <code>threshold + 1</code>…","","","","","","","","","Generates a non-redacted debug string. This method differs …","Generates a non-redacted debug string. This method differs …","","Returns the secret master key.","Returns the <code>i</code>-th secret key share.","Serialization and deserialization implementations for …","","","","","","","","","","","","","Left shift <code>self</code> by <code>count</code>, returning the result.","Right shift <code>self</code> by <code>count</code>, returning the result.","Signs the given message.","Signs the given message.","Signs the given element of <code>G2</code>.","Signs the given element of <code>G2</code>.","","","Calculates the <code>square</code> of this element.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the threshold <code>t</code>: any set of <code>t + 1</code> signature shares …","Returns the threshold <code>t</code>: any set of <code>t + 1</code> signature shares …","","","Returns a byte string representation of the public key.","Returns a byte string representation of the public key …","Returns a byte string representation of the signature.","Returns a byte string representation of the signature …","Converts the secret key to big endian bytes","Serializes to big endian bytes","Returns byte representation of Ciphertext","Serializes the share as big endian bytes","Serializes to big endian bytes","Serializes to big endian bytes","","","","","Converts an element of <code>Scalar</code> into a byte representation in","Converts an element of <code>Scalar</code> into a byte representation in","Serializes this element into compressed form.","Serializes this element into compressed form.","Serializes this element into compressed form.","Serializes this element into compressed form.","","","","","","","","","","","","","","","","","","","","Converts a Montgomery form <code>Scalar</code> into little-endian …","","","","","","Serializes this element into uncompressed form.","","Serializes this element into uncompressed form.","Serializes this element into uncompressed form.","","Serializes this element into uncompressed form.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a set of secret key shares, where any <code>threshold + 1</code>…","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if the signature matches the message.","Returns <code>true</code> if the signature matches the message.","Returns <code>true</code> if this is a valid ciphertext. This check is …","Returns <code>true</code> if the decryption share matches the …","Returns <code>true</code> if the signature matches the element of <code>G2</code>.","Returns <code>true</code> if the signature matches the element of <code>G2</code>.","","","","","","","","","","","","","","","","","","Returns the x coordinate.","Returns the x coordinate.","Returns the x coordinate.","Returns the x coordinate.","Returns the y coordinate.","Returns the y coordinate.","Returns the y coordinate.","Returns the y coordinate.","Returns the z coordinate.","Returns the z coordinate.","","","The degree is too high for the coefficients to be indexed …","Samples for interpolation contain a duplicated index.","A crypto error.","The result of Hash To Field is zero which should never …","An error reading a structure from an array of bytes. …","Not enough signature shares.","A crypto result.","","","","","","","","","","","","","","","","A commitment to a symmetric bivariate polynomial.","A symmetric bivariate polynomial in the prime field.","A commitment to a univariate polynomial.","A univariate polynomial in the prime field.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the corresponding commitment.","Returns the corresponding commitment. That information can …","Returns the polynomial with constant value <code>c</code>.","Returns the degree.","Returns the polynomial’s degree.","Returns the polynomial’s degree; which is the same in …","Returns the polynomial’s degree: It is the same in both …","","","","","","","","","Returns the value at the point <code>i</code>.","Returns the <code>i</code>-th public key share.","Returns the polynomial’s value at the point <code>(x, y)</code>.","Returns the commitment’s value at the point <code>(x, y)</code>.","","","","","","","","","","","Deserializes from big endian bytes","Deserializes from big endian bytes","Deserializes from big endian bytes","Deserializes from big endian bytes","","","Returns the identity function, i.e. the polynomial “<code>x</code>”.","Returns the unique polynomial <code>f</code> of degree <code>samples.len() - 1</code>…","","","","","Returns <code>true</code> if the polynomial is the constant value <code>0</code>.","Returns the (monic) monomial: <code>x.pow(degree)</code>.","","","","","","","","","","Returns the polynomial with constant value <code>1</code>.","","","Creates a random polynomial.","Creates a random polynomial.","Generates a non-redacted debug string. This method differs …","Generates a non-redacted debug string. This method differs …","Returns the <code>x</code>-th row, as a univariate polynomial.","Returns the <code>x</code>-th row, as a commitment to a univariate …","","","","","","","","Serializes to big endian bytes","Serializes to big endian bytes","Serializes to big endian bytes","Serializes to big endian bytes","","","","","","","","","","","","","Creates a random polynomial. This constructor is identical …","Creates a random polynomial.","","","","","","","","","Returns the polynomial with constant value <code>0</code>.","","","","","A wrapper type to facilitate serialization and …","<code>SerdeSecret</code> is a wrapper struct for serializing and …","","","","","","","","","","","","","","Returns a reference to the actual secret contained in the …","","","Returns the wrapped field element.","Returns the actual secret from the wrapper","","","","","","","","","","","",""],"i":[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,3,3,3,3,4,4,5,5,5,5,6,6,3,3,3,3,5,5,5,5,6,6,5,2,3,4,5,2,3,4,5,7,8,9,1,10,11,12,13,14,15,2,3,4,5,6,16,7,8,9,1,10,11,12,13,14,15,2,3,4,5,6,16,6,6,7,8,9,1,10,11,12,13,14,15,2,3,4,5,6,16,7,8,9,1,10,11,12,13,14,15,2,3,4,5,6,16,7,8,9,1,12,14,6,14,2,4,2,3,4,5,6,2,3,4,5,6,6,10,14,11,11,10,11,2,4,6,7,8,10,11,14,15,7,8,9,1,10,11,12,13,14,2,3,4,5,6,3,5,6,10,7,7,7,7,7,8,9,1,10,10,11,12,13,14,15,2,3,4,5,6,0,7,8,9,1,10,11,12,13,14,2,2,3,3,4,4,5,5,6,6,16,7,7,7,8,9,1,10,11,12,13,14,14,15,15,2,2,2,2,3,3,3,3,4,4,4,5,5,5,6,6,6,6,16,7,8,9,1,10,11,12,13,14,15,2,3,4,5,6,6,2,3,4,5,2,3,4,5,2,3,4,5,10,11,2,3,4,5,6,6,6,2,2,3,4,4,5,2,2,3,4,4,5,2,3,4,5,7,8,9,1,12,13,14,0,3,5,2,3,4,5,7,8,9,1,10,11,12,13,14,15,2,3,4,5,6,6,16,17,6,6,2,3,4,5,6,2,3,4,5,6,2,4,6,6,2,2,3,3,4,4,5,5,6,6,6,2,2,3,3,4,4,5,5,6,6,16,6,7,8,9,1,10,11,12,13,14,15,2,3,4,5,6,6,6,16,2,4,9,7,8,9,1,12,14,6,0,15,10,14,11,14,15,10,15,3,5,6,2,2,2,3,5,10,11,6,15,15,0,7,8,9,1,12,13,14,2,3,4,5,6,6,6,10,11,10,11,6,6,6,2,2,3,3,3,3,4,4,5,5,5,5,6,6,3,3,3,3,5,5,5,5,6,6,3,5,14,15,3,5,7,8,9,1,10,11,12,13,14,15,2,3,4,5,6,6,2,3,4,5,2,4,6,7,8,9,1,10,11,12,13,14,15,2,3,4,5,6,16,6,2,3,4,5,6,2,2,3,4,4,5,7,8,9,1,10,11,12,13,14,15,2,3,4,5,6,16,7,8,9,1,10,11,12,13,14,15,2,3,4,5,6,16,15,7,8,9,1,10,11,12,13,14,15,2,3,4,5,6,16,2,4,7,8,12,8,7,8,7,8,9,1,10,11,12,13,14,15,2,3,4,5,6,16,2,2,3,4,5,2,3,4,5,3,5,6,10,18,18,0,18,18,18,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,0,0,0,19,19,19,20,19,20,19,20,21,22,19,20,21,22,19,20,21,22,19,20,21,22,20,22,19,21,19,19,20,21,22,19,20,22,19,21,19,20,22,19,20,21,22,19,20,21,22,19,19,20,20,21,22,19,20,21,22,20,22,19,19,19,20,21,22,19,19,19,19,19,19,19,19,19,20,22,19,20,22,19,21,19,21,21,22,19,20,22,19,19,19,19,19,20,21,22,19,20,21,22,19,20,21,22,19,20,21,22,19,21,19,20,21,22,19,20,21,22,19,19,21,23,24,0,0,23,24,23,24,24,24,24,23,24,24,24,23,24,24,23,24,23,24,24,23,24,24,23,24,23,24,23,24,23,24],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["g1projective",3]],["g1projective",3]],[[["g1projective",3]],["g1projective",3]],[[["g1projective",3]],["g1projective",3]],[[["g1affine",3]],["g1projective",3]],[[["g1projective",3]],["g1projective",3]],[[["g1affine",3]],["g1projective",3]],[[["g2projective",3]],["g2projective",3]],[[["g2projective",3]],["g2projective",3]],[[["g2affine",3]],["g2projective",3]],[[["g2projective",3]],["g2projective",3]],[[["g2projective",3]],["g2projective",3]],[[["g2affine",3]],["g2projective",3]],[[["scalar",3]],["scalar",3]],[[["scalar",3]],["scalar",3]],[[["g1projective",3]]],[[["g1affine",3]]],[[["g1affine",3]]],[[["g1projective",3]]],[[["g2projective",3]]],[[["g2affine",3]]],[[["g2projective",3]]],[[["g2affine",3]]],[[["scalar",3]]],[[["scalar",3]]],[[["g2affine",3]],["g2projective",3]],[[],["blst_p1_affine",3]],[[],["blst_p1",3]],[[],["blst_p2_affine",3]],[[],["blst_p2",3]],[[],["blst_p1_affine",3]],[[],["blst_p1",3]],[[],["blst_p2_affine",3]],[[],["blst_p2",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bitarray",3,[["lsb0",3]]]],[[],["publickey",3]],[[],["publickeyshare",3]],[[],["signature",3]],[[],["signatureshare",3]],[[],["secretkey",3]],[[],["secretkeyshare",3]],[[],["ciphertext",3]],[[],["decryptionshare",3]],[[],["publickeyset",3]],[[],["secretkeyset",3]],[[],["g1affine",3]],[[],["g1projective",3]],[[],["g2affine",3]],[[],["g2projective",3]],[[],["scalar",3]],[[],["bls12",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ordering",4]],[[["publickeyshare",3]],["ordering",4]],[[],["ordering",4]],[[["signatureshare",3]],["ordering",4]],[[],["ordering",4]],[[["publickeyset",3]],["ordering",4]],[[["scalar",3]],["ordering",4]],[[],["result",6,[["signature",3]]]],[[],["usize",15]],[[],["usize",15]],[[["choice",3]]],[[["choice",3]]],[[["choice",3]]],[[["choice",3]]],[[["choice",3]]],[[["g1affine",3],["g1affine",3],["choice",3]],["g1affine",3]],[[["g1projective",3],["g1projective",3],["choice",3]],["g1projective",3]],[[["g2affine",3],["g2affine",3],["choice",3]],["g2affine",3]],[[["g2projective",3],["g2projective",3],["choice",3]],["g2projective",3]],[[["scalar",3],["scalar",3],["choice",3]],["scalar",3]],[[["scalar",3]],["choice",3]],[[["ciphertext",3]],["option",4,[["vec",3,[["u8",15]]]]]],[[["ciphertext",3]],["result",6,[["vec",3,[["u8",15]]]]]],[[["ciphertext",3]],["option",4,[["decryptionshare",3]]]],[[["ciphertext",3]],["decryptionshare",3]],[[]],[[],["secretkeyshare",3]],[[],["g1affine",3]],[[],["g2affine",3]],[[],["scalar",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4,[["g1affine",3]]]],[[],["result",4,[["g1projective",3]]]],[[],["result",4,[["g2affine",3]]]],[[],["result",4,[["g2projective",3]]]],[[],["result",4,[["scalar",3]]]],[[],["g1projective",3]],[[],["g2projective",3]],[[],["scalar",3]],[[]],[[["asref",8]],["ciphertext",3]],[[["asref",8]],["ciphertext",3]],[[["g1affine",3]],["bool",15]],[[["g1",3]],["bool",15]],[[["publickey",3]],["bool",15]],[[["publickeyshare",3]],["bool",15]],[[["signature",3]],["bool",15]],[[["signatureshare",3]],["bool",15]],[[["fr",3]],["bool",15]],[[["secretkey",3]],["bool",15]],[[["secretkeyshare",3]],["bool",15]],[[["ciphertext",3]],["bool",15]],[[["decryptionshare",3]],["bool",15]],[[["publickeyset",3]],["bool",15]],[[["secretkeyset",3]],["bool",15]],[[["g1affine",3]],["bool",15]],[[["g1projective",3]],["bool",15]],[[["g2affine",3]],["bool",15]],[[["g2projective",3]],["bool",15]],[[["scalar",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[["formatter",3]],["result",4,[["error",3]]]],[[]],[[["g1",3]]],[[["g1affine",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["commitment",3]],["publickeyset",3]],[[]],[[["poly",3]],["secretkeyset",3]],[[["g1projective",3]],["g1affine",3]],[[]],[[["publickey",3]]],[[["g1projective",3]],["g1affine",3]],[[["g1affine",3]],["g1projective",3]],[[]],[[["g1affine",3]],["g1projective",3]],[[["publickey",3]]],[[["g2projective",3]],["g2affine",3]],[[]],[[["g2projective",3]],["g2affine",3]],[[["g2affine",3]],["g2projective",3]],[[["g2affine",3]],["g2projective",3]],[[]],[[["u64",15]],["scalar",3]],[[["secretkey",3]]],[[]],[[["blst_fr",3]],["scalar",3]],[[]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[],["result",6]],[[["vec",3,[["u8",15]]]],["result",6]],[[["vec",3,[["u8",15]]]],["result",6]],[[],["ctoption",3,[["g1affine",3]]]],[[],["ctoption",3,[["g1projective",3]]]],[[],["ctoption",3,[["g2affine",3]]]],[[],["ctoption",3,[["g2projective",3]]]],[[],["ctoption",3,[["scalar",3]]]],[[],["ctoption",3,[["scalar",3]]]],[[],["ctoption",3,[["g1affine",3]]]],[[],["ctoption",3,[["g1projective",3]]]],[[],["ctoption",3,[["g2affine",3]]]],[[],["ctoption",3,[["g2projective",3]]]],[[],["ctoption",3,[["g1affine",3]]]],[[],["ctoption",3,[["g1projective",3]]]],[[],["ctoption",3,[["g2affine",3]]]],[[],["ctoption",3,[["g2projective",3]]]],[[],["ctoption",3,[["g1affine",3]]]],[[],["ctoption",3,[["g1projective",3]]]],[[],["ctoption",3,[["g2affine",3]]]],[[],["ctoption",3,[["g2projective",3]]]],[[["fr",3]]],[[["fr",3]]],[[["fp",3],["fp",3],["bool",15]],["g1affine",3]],[[["fp",3],["fp",3],["fp",3]],["g1projective",3]],[[["fp2",3],["fp2",3],["bool",15]],["g2affine",3]],[[["fp2",3],["fp2",3],["fp2",3]],["g2projective",3]],[[],["ctoption",3,[["scalar",3]]]],[[],["option",4,[["scalar",3]]]],[[],["ctoption",3,[["scalar",3]]]],[[],["ctoption",3,[["g1affine",3]]]],[[],["ctoption",3,[["g1affine",3]]]],[[],["ctoption",3,[["g1projective",3]]]],[[],["ctoption",3,[["g2affine",3]]]],[[],["ctoption",3,[["g2affine",3]]]],[[],["ctoption",3,[["g2projective",3]]]],[[],["ctoption",3,[["g1affine",3]]]],[[],["ctoption",3,[["g1affine",3]]]],[[],["ctoption",3,[["g1projective",3]]]],[[],["ctoption",3,[["g2affine",3]]]],[[],["ctoption",3,[["g2affine",3]]]],[[],["ctoption",3,[["g2projective",3]]]],[[],["g1affine",3]],[[],["g1projective",3]],[[],["g2affine",3]],[[],["g2projective",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["asref",8]],["g2",3]],[[],["g1projective",3]],[[],["g2projective",3]],[[],["g1affine",3]],[[],["g1projective",3]],[[],["g2affine",3]],[[],["g2projective",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["blst_scalar",3]],[[]],[[],["fr",3]],[[],["fr",3]],[[],["ctoption",3,[["scalar",3]]]],[[],["choice",3]],[[],["choice",3]],[[],["choice",3]],[[],["choice",3]],[[],["choice",3]],[[],["choice",3]],[[],["choice",3]],[[],["choice",3]],[[],["choice",3]],[[],["choice",3]],[[],["choice",3]],[[],["choice",3]],[[],["choice",3]],[[],["i8",15]],[[["scalar",3]],["g1projective",3]],[[["scalar",3]],["g1projective",3]],[[["scalar",3]],["g1projective",3]],[[["scalar",3]],["g1projective",3]],[[["scalar",3]],["g2projective",3]],[[["scalar",3]],["g2projective",3]],[[["scalar",3]],["g2projective",3]],[[["scalar",3]],["g2projective",3]],[[["scalar",3]],["scalar",3]],[[["scalar",3]],["scalar",3]],[[],["scalar",3]],[[["scalar",3]]],[[["scalar",3]]],[[["scalar",3]]],[[["scalar",3]]],[[["scalar",3]]],[[["scalar",3]]],[[["scalar",3]]],[[["scalar",3]]],[[["scalar",3]]],[[["scalar",3]]],[[]],[[],["scalar",3]],[[["publickey",3]],["bool",15]],[[["publickeyshare",3]],["bool",15]],[[["signature",3]],["bool",15]],[[["signatureshare",3]],["bool",15]],[[["secretkey",3]],["bool",15]],[[["secretkeyshare",3]],["bool",15]],[[["ciphertext",3]],["bool",15]],[[["decryptionshare",3]],["bool",15]],[[["publickeyset",3]],["bool",15]],[[["secretkeyset",3]],["bool",15]],[[],["g1affine",3]],[[],["g1projective",3]],[[],["g2affine",3]],[[],["g2projective",3]],[[],["scalar",3]],[[],["u32",15]],[[],["scalar",3]],[[]],[[]],[[]],[[],["bool",15]],[[],["option",4,[["ordering",4]]]],[[["publickeyshare",3]],["option",4,[["ordering",4]]]],[[],["option",4,[["ordering",4]]]],[[["signatureshare",3]],["option",4,[["ordering",4]]]],[[],["option",4,[["ordering",4]]]],[[["publickeyset",3]],["option",4,[["ordering",4]]]],[[["scalar",3]],["option",4,[["ordering",4]]]],null,[[],["poly",3]],[[],["publickey",3]],[[],["publickey",3]],[[],["publickeyshare",3]],[[["intofr",8]],["publickeyshare",3]],[[],["publickeyset",3]],[[]],[[["usize",15]]],[[],["g1projective",3]],[[],["g2projective",3]],[[],["scalar",3]],[[],["usize",15]],[[],["result",4,[["g1affine",3],["error",3]]]],[[],["result",4,[["g1affine",3],["error",3]]]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[],["string",3]],[[],["string",3]],[[],["scalar",3]],[[],["secretkey",3]],[[["intofr",8]],["secretkeyshare",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],["scalar",3]],[[["usize",15]],["scalar",3]],[[["asref",8]],["signature",3]],[[["asref",8]],["signatureshare",3]],[[["into",8,[["g2affine",3]]]],["signature",3]],[[["into",8,[["g2affine",3]]]],["signatureshare",3]],[[],["ctoption",3,[["scalar",3]]]],[[],["scalar",3]],[[]],[[["g1projective",3]],["g1projective",3]],[[["g1projective",3]],["g1projective",3]],[[["g1projective",3]],["g1projective",3]],[[["g1projective",3]],["g1projective",3]],[[["g1affine",3]],["g1projective",3]],[[["g1affine",3]],["g1projective",3]],[[["g2projective",3]],["g2projective",3]],[[["g2projective",3]],["g2projective",3]],[[["g2projective",3]],["g2projective",3]],[[["g2affine",3]],["g2projective",3]],[[["g2affine",3]],["g2projective",3]],[[["g2projective",3]],["g2projective",3]],[[["scalar",3]],["scalar",3]],[[["scalar",3]],["scalar",3]],[[["g1affine",3]]],[[["g1affine",3]]],[[["g1projective",3]]],[[["g1projective",3]]],[[["g2affine",3]]],[[["g2projective",3]]],[[["g2projective",3]]],[[["g2affine",3]]],[[["scalar",3]]],[[["scalar",3]]],[[],["g1projective",3]],[[],["g2projective",3]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["vec",3,[["u8",15]]]],[[]],[[],["vec",3,[["u8",15]]]],[[],["vec",3,[["u8",15]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bitarray",3,[["lsb0",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],["result",6]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["usize",15]],[[],["usize",15]],[[["signature",3],["asref",8]],["bool",15]],[[["signatureshare",3],["asref",8]],["bool",15]],[[],["bool",15]],[[["decryptionshare",3],["ciphertext",3]],["bool",15]],[[["signature",3],["into",8,[["g2affine",3]]]],["bool",15]],[[["signatureshare",3],["into",8,[["g2affine",3]]]],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4,[["usize",15],["error",3]]]],[[],["fp",3]],[[],["fp",3]],[[],["fp2",3]],[[],["fp2",3]],[[],["fp",3]],[[],["fp",3]],[[],["fp2",3]],[[],["fp2",3]],[[],["fp",3]],[[],["fp2",3]],[[],["scalar",3]],[[]],null,null,null,null,null,null,null,[[]],[[]],[[],["error",4]],[[]],[[["error",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,[[["u64",15]]],[[["fr",3]]],[[],["poly",3]],[[],["commitment",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["poly",3]],[[],["commitment",3]],[[],["bivarpoly",3]],[[],["bivarcommitment",3]],[[]],[[]],[[]],[[]],[[],["ordering",4]],[[],["ordering",4]],[[],["commitment",3]],[[],["bivarcommitment",3]],[[["fr",3]]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["result",4]],[[],["result",4]],[[["deserializer",8]],["result",4]],[[]],[[]],[[["poly",3]],["bool",15]],[[["commitment",3]],["bool",15]],[[["bivarcommitment",3]],["bool",15]],[[["intofr",8]],["fr",3]],[[["intofr",8]],["g1",3]],[[["intofr",8],["intofr",8]],["fr",3]],[[["intofr",8],["intofr",8]],["g1",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["vec",3,[["fr",3]]]]],[[]],[[["vec",3,[["g1",3]]]]],[[]],[[]],[[["vec",3,[["u8",15]]]],["result",6]],[[["vec",3,[["u8",15]]]],["result",6]],[[["vec",3,[["u8",15]]]],["result",6]],[[["vec",3,[["u8",15]]]],["result",6]],[[]],[[]],[[]],[[],["result",6]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["usize",15]]],[[["fr",3]]],[[]],[[["u64",15]]],[[["fr",3]]],[[["fr",3]]],[[]],[[["poly",3]],["bool",15]],[[["commitment",3]],["bool",15]],[[["bivarcommitment",3]],["bool",15]],[[]],[[],["option",4,[["ordering",4]]]],[[],["option",4,[["ordering",4]]]],[[["usize",15]]],[[["usize",15]]],[[],["string",3]],[[],["string",3]],[[["intofr",8]],["poly",3]],[[["intofr",8]],["commitment",3]],[[],["result",4]],[[],["result",4]],[[["serializer",8]],["result",4]],[[],["poly",3]],[[["fr",3]]],[[["u64",15]]],[[]],[[],["vec",3,[["u8",15]]]],[[],["vec",3,[["u8",15]]]],[[],["vec",3,[["u8",15]]]],[[],["vec",3,[["u8",15]]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],["result",6]],[[["usize",15]],["result",6]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[],["serdesecret",3]],[[]],[[]],[[["deserializer",8]],["result",4]],[[],["result",4]],[[["serdesecret",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],["fr",3]],[[]],[[["serdesecret",3]],["bool",15]],[[["serializer",8]],["result",4]],[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]]],"p":[[3,"SignatureShare"],[3,"G1Affine"],[3,"G1"],[3,"G2Affine"],[3,"G2"],[3,"Fr"],[3,"PublicKey"],[3,"PublicKeyShare"],[3,"Signature"],[3,"SecretKey"],[3,"SecretKeyShare"],[3,"Ciphertext"],[3,"DecryptionShare"],[3,"PublicKeySet"],[3,"SecretKeySet"],[3,"PEngine"],[8,"IntoFr"],[4,"Error"],[3,"Poly"],[3,"Commitment"],[3,"BivarPoly"],[3,"BivarCommitment"],[3,"FieldWrap"],[3,"SerdeSecret"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};